### @export "exception"
class 구문분석기_오류(Exception):
    pass

### @export "sentence"
class 문장(object):

    def __init__(self, 주어, 목적어, 동사):
        # 실행인자로 ('명사','공주') 같은 튜플을 받아 변환합니다
        self.주어 = 주어[1]
        self.목적어 = 목적어[1]
        self.동사 = 동사[1]

### @export "미리보기"
def 미리보기(단어_리스트):
    if 단어_리스트:
        단어 = 단어_리스트[0]
        return 단어[0]
    else:
        return None

### @export "맞춰보기"
def 맞춰보기(단어_리스트, 기대값):
    if 단어_리스트:
        단어 = 단어_리스트.pop(0)

        if 단어[0] == 기대값:
            return 단어
        else:
            return None
    else:
        return None

### @export "건너뛰기"
def 건너뛰기(단어_리스트, 단어_유형):
    while 미리보기(단어_리스트) == 단어_유형:
        맞춰보기(단어_리스트, 단어_유형)

### @export "동사_분석"
def 동사_분석(단어_리스트):
    건너뛰기(단어_리스트, '제외')

    if 미리보기(단어_리스트) == '동사':
        return 맞춰보기(단어_리스트, '동사')
    else:
        raise 구문분석기_오류("동사가 나올 차례입니다.")

### @export "목적어_분석"
def 목적어_분석(단어_리스트):
    건너뛰기(단어_리스트, '제외')
    다음_단어 = 미리보기(단어_리스트)

    if 다음_단어 == '명사':
        return 맞춰보기(단어_리스트, '명사')
    elif 다음_단어 == '방향':
        return 맞춰보기(단어_리스트, '방향')
    else:
        raise 구문분석기_오류("명사나 방향이 나올 차례입니다.")

### @export "주어_분석"
def 주어_분석(단어_리스트):
    건너뛰기(단어_리스트, '제외')
    다음_단어 = 미리보기(단어_리스트)

    if 다음_단어 == '명사':
        return 맞춰보기(단어_리스트, '명사')
    elif 다음_단어 == '동사':
        return ('명사', '플레이어')
    else:
        raise 구문분석기_오류("명사가 나올 차례입니다.")

### @export "문장_분석"
def 문장_분석(단어_리스트):
    주어 = 주어_분석(단어_리스트)
    try:
        목적어 = 목적어_분석(단어_리스트)
    except 구문분석기_오류:
        # 명사가 하나면 주어가 아닌 목적어로 간주
        목적어 = 주어
        주어 = ('명사', '플레이어')
    동사 = 동사_분석(단어_리스트)

    return 문장(주어, 동사, 목적어)

